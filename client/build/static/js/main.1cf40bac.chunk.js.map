{"version":3,"sources":["hoc/Aux/Aux.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","containers/Charts/RequestMethodsPie.js","containers/Charts/AnswerCodesPie.js","containers/Charts/ShortAnswersDoughnut.js","containers/Charts/RequestsPerMinuteChart.js","components/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","navigationItem","className","to","link","exact","activeClassName","navigationItems","drawerToggle","onClick","clicked","toolbar","drawerToggleClicked","backdrop","show","sideDrawer","attachedClasses","open","Aux","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","this","classes","Component","RequestMethodsPie","requests","colors","fetch","then","res","json","data","Object","values","rca","length","pastel","map","el","hex","width","height","margin","top","right","left","bottom","dataKey","name","entry","index","key","fill","stroke","strokeWidth","cursor","AnswerCodesPie","answers","updatedAnswers","ShortAnswersDoughnut","Math","PI","activeIndex","sizeDistribution","console","log","value","counterSize","counter","cx","cy","labelLine","label","outerRadius","padding","RequestsPerMinuteChart","reqsPerMin","xtitle","ytitle","bytes","welcome","App","path","component","Welcome","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1cf40bac.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './NavigationItem.css';\n\nconst navigationItem = ( props ) => (\n    <li className='NavigationItem'>\n        <NavLink \n            to={props.link}\n            exact={props.exact}\n            activeClassName='active'>{props.children}</NavLink>\n    </li>\n);\n\nexport default navigationItem;","import React from 'react';\n\nimport './NavigationItems.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigationItems = () => (\n    <ul className='NavigationItems'>\n        {/* <NavigationItem link=\"/\" exact>Log Stats</NavigationItem> */}\n        <NavigationItem link=\"/request-methods\">Request Methods Distribution</NavigationItem>\n        <NavigationItem link=\"/answer-codes\">Answer Status Rate</NavigationItem>\n        <NavigationItem link=\"/short-answers\">Short Answer Rate</NavigationItem>\n        <NavigationItem link=\"/requests-per-min\">Requests Per Minute</NavigationItem>\n    </ul>\n);\n\nexport default navigationItems;","import React from 'react';\n\nimport './DrawerToggle.css';\n\nconst drawerToggle = (props) => (\n    <div className='DrawerToggle' onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\n\nimport './Toolbar.css';\n/* import Logo from '../../Logo/Logo';\n */\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\nconst toolbar = ( props ) => (\n    <header className='Toolbar'>\n        <DrawerToggle clicked={props.drawerToggleClicked} />\n{/*         <div className={classes.Logo}>\n            <Logo />\n        </div>\n */}        <nav className='DesktopOnly'>\n            <NavigationItems />\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = (props) => (\n    props.show ? <div className='Backdrop' onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React from 'react';\nimport Aux from '../../../hoc/Aux/Aux';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\n/* import Logo from '../../Logo/Logo';\n */\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport './SideDrawer.css';\n\n\nconst sideDrawer = ( props ) => {\n    let attachedClasses = ['SideDrawer', 'Close'];\n    if (props.open) {\n        attachedClasses = ['SideDrawer', 'Open'];\n    }\n    return (\n        <Aux>\n            <Backdrop show={props.open} clicked={props.closed}/>\n            <div className={attachedClasses.join(' ')}>\n{/*                 <div className={classes.Logo}>\n                    <Logo />\n                </div>\n */}                <nav>\n                    <NavigationItems />\n                </nav>\n            </div>\n        </Aux>\n    );\n};\n\nexport default sideDrawer;","import React, { Component } from 'react';\n\nimport Aux from '../Aux/Aux';\nimport './Layout.css';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\n\nclass Layout extends Component {\n    state = {\n        showSideDrawer: false\n    }\n\n    sideDrawerClosedHandler = () => {\n        this.setState( { showSideDrawer: false } );\n    }\n\n    sideDrawerToggleHandler = () => {\n        this.setState( ( prevState ) => {\n            return { showSideDrawer: !prevState.showSideDrawer };\n        } );\n    }\n\n    render () {\n        return (\n            <Aux>\n                <Toolbar drawerToggleClicked={this.sideDrawerToggleHandler} />\n                <SideDrawer\n                    open={this.state.showSideDrawer}\n                    closed={this.sideDrawerClosedHandler} />\n                <main classes='.Content'>\n                    {this.props.children}\n                </main>\n            </Aux>\n        )\n    }\n}\n\nexport default Layout;","import React, {Component} from 'react';\nimport {BarChart, Bar, Cell, Tooltip, XAxis, YAxis, Legend} from 'recharts';\nimport rca, {pastel} from 'rainbow-colors-array';\n\nimport './RequestMethodsPie.css';\n\n\nclass RequestMethodsPie extends Component {\n  state = {\n    requests: {},\n    colors: {}\n  };\n\n  componentDidMount() {\n    fetch('/requests')\n      .then( res => res.json() )\n      .then(data => {\n          this.setState({ \n              requests: data,\n              colors: Object.values(rca(data.length, \"hex\", pastel))\n                .map(el => \"#\" + el.hex)\n          });\n       })\n  }\n\n  render() {\n    return (\n      <div>\n          <BarChart \n                width={1000} \n                height={700} \n                margin={{top: 150, right: 200, left: 400, bottom: 50}}\n                data={this.state.requests}>\n\n            <XAxis dataKey=\"name\"/>\n            <YAxis/>\n\n            <Bar dataKey=\"value\" \n                  name=\"HTTP request methods distribution\">\n              {\n                  Object.values(this.state.requests).map((entry, index) => (\n                    <Cell key={`cell-${index}`} \n                          fill={this.state.colors[index]}\n                          stroke=\"#000000\"\n                          strokeWidth={index === 2 ? 4 : 1}\n                    />))\n              }\n            </Bar>\n            <Tooltip cursor={{ fill: 'rgba(206, 206, 206, 0.2)' }} />\n            <Legend />\n\n          </BarChart>          \n      </div>\n\n    );\n  }\n}\n\nexport default RequestMethodsPie;","import React, {Component} from 'react';\nimport {PieChart, Pie, Cell, Tooltip, BarChart, Bar, Legend, XAxis, YAxis} from 'recharts';\nimport rca, {pastel} from 'rainbow-colors-array';\n\nimport './AnswerCodesPie.css';\n\nclass AnswerCodesPie extends Component {\n  state = {\n    answers: {},\n    colors: {}\n  };\n\n  componentDidMount() {\n    fetch('/answers')\n      .then( res => res.json() )\n      .then( updatedAnswers => \n          this.setState({\n             answers: updatedAnswers,\n             colors: Object.values(rca(updatedAnswers.length, \"hex\", pastel))\n                  .map(el => \"#\" + el.hex)\n          }));\n  }\n\n  render() {\n    return (\n      <div>\n{/*           <PieChart width={1000} height={1000}>\n            <Pie dataKey=\"value\" \n                isAnimationActive={false} \n                data={this.state.answers} \n                cx={400} cy={400} \n                outerRadius={200} \n                fill=\"#8884d8\" \n                label=\"Answer Codes\">\n               {\n                  Object.values(this.state.answers).map((entry, index) => (\n                      <Cell key={`cell-${index}`} \n                            fill={this.state.colors[index]}/>\n                ))\n              }\n            </Pie>\n            <Tooltip/>\n          </PieChart>\n\n */}         \n        <BarChart\n                width={1000} \n                height={700} \n                margin={{top: 150, right: 200, left: 400, bottom: 50}}\n                data={this.state.answers}>\n          <Bar dataKey=\"value\"\n                    name=\"HTTP answer codes distribution\">\n                {\n                    Object.values(this.state.answers).map((entry, index) => (\n                      <Cell key={`cell-${index}`} \n                            fill={this.state.colors[index]}\n                            stroke=\"#000000\"\n                            strokeWidth={index === 2 ? 4 : 1}\n                      />))\n                }\n          </Bar>\n          <XAxis dataKey=\"name\"/>\n          <YAxis/>\n          <Tooltip cursor={{ fill: 'rgba(206, 206, 206, 0.2)' }} />\n          <Legend />\n        </BarChart>          \n\n      </div>\n\n    );\n  }\n}\n\nexport default AnswerCodesPie;","import React, {Component} from 'react';\nimport {PieChart, Pie, Legend, Cell, Tooltip} from 'recharts';\nimport rca, {pastel} from 'rainbow-colors-array';\n\nimport './ShortAnswersDoughnut.css';\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nclass ShortAnswersDoughnut extends Component {\n  \n   state= {\n      activeIndex: 0,\n      sizeDistribution: {},\n      colors: {}\n    };\n\n\n  componentDidMount() {\n    fetch('/short-answers')\n      .then( res => res.json() )\n      .then( data => {\n        console.log(data[0].value);\n         this.setState({\n              activeIndex: 0,\n              sizeDistribution: \n                  [{name: 'LARGER than 1000B' , value: data[0].value.counterSize},\n                   {name: 'SMALLER than 1000B' , \n                          value: data[0].value.counter-data[0].value.counterSize}],\n              colors: Object.values(rca(2, \"hex\", pastel))\n                   .map(el => \"#\" + el.hex)\n          });\n        });\n  }\n\n  render() {\n      return (\n            <PieChart width={1000} height={700}>\n                <Pie\n                  dataKey=\"value\"\n                  name=\"Distribution of the size of the answer of all requests with code 200 and size < 1000B\"\n                  cx={480}\n                  cy={400}\n                  data={this.state.sizeDistribution}\n                  labelLine={false}\n                  label=\"lab\"/* {renderCustomizedLabel} */\n                  outerRadius={200}\n                  fill=\"#8884d8\"\n                >\n                  {\n                    Object.values(this.state.sizeDistribution).map((entry, index) => \n                        <Cell key={`cell-${index}`} \n                          fill={this.state.colors[index % this.state.colors.length]} />)\n                  }\n                </Pie>\n                <Legend padding=\"100\" />\n            </PieChart>\n      );\n  }\n}\n\nexport default ShortAnswersDoughnut;","import React, {Component} from 'react';\n/* import { ResponsiveContainer, LineChart, CartesianGrid, \n    XAxis, YAxis, Label, Tooltip, Line } from \"recharts\";\n */import rca, {pastel} from 'rainbow-colors-array';\nimport { LineChart } from 'react-chartkick';\nimport 'chart.js';\n\nimport './RequestsPerMinuteChart.css';\n\n\nclass RequestsPerMinuteChart extends Component {\n  state = {\n    reqsPerMin: {},\n    colors: {}\n  };\n\n  componentDidMount() {\n    fetch('/requests-per-min')\n      .then( res => res.json() )\n      .then(data => {\n          this.setState({ \n            reqsPerMin: data,\n              colors: Object.values(rca(data.length, \"hex\", pastel))\n                .map(el => \"#\" + el.hex)\n          });\n          console.log(this.state.reqsPerMin);\n\n       })\n  }\n\n  render() {\n    return (\n/*       <ResponsiveContainer \n        width={\"100%\"} \n        height={700}>\n          <LineChart\n            data={this.state.reqsPerMin}\n            margin={{top: 150, right: 200, left: 100, bottom: 50}}\n          >\n          <CartesianGrid />\n          <XAxis type=\"number\" dataKey=\"time\" domain={[\"dataMin\", \"dataMax\"]}>\n            <Label\n              value={\"Time\"}\n              position=\"bottom\"\n              style={{ textAnchor: \"middle\" }}\n            />\n          </XAxis>\n          <YAxis>\n            <Label\n              value={\"Number of requests\"}\n              position=\"left\"\n              angle={-90}\n              style={{ textAnchor: \"middle\" }}\n            />\n          </YAxis>\n          <Tooltip />\n          <Line\n            dataKey=\"temperature\"\n            name=\"Temperature\"\n            dot={false}\n            type={\"natural\"}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    */ \n       <LineChart data={this.state.reqsPerMin} xtitle=\"Time\" ytitle=\"Requests\" bytes=\"true\" />  \n    \n      );\n\n  }\n}\n\nexport default RequestsPerMinuteChart;","import React from 'react';\n\nconst welcome = props => (\n  <div>\n  </div>\n);\n\nexport default welcome;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Layout from './hoc/Layout/Layout';\nimport RequestMethodsPie from './containers/Charts/RequestMethodsPie';\nimport AnswerCodesPie from './containers/Charts/AnswerCodesPie';\nimport ShortAnswersDoughnut from './containers/Charts/ShortAnswersDoughnut';\nimport RequestsPerMinuteChart from './containers/Charts/RequestsPerMinuteChart';\n\n\nimport Welcome from './components/Welcome';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <Switch>\n            <Route path=\"/request-methods\" component={RequestMethodsPie} />\n            <Route path=\"/answer-codes\" component={AnswerCodesPie} />\n            <Route path=\"/short-answers\" component={ShortAnswersDoughnut} />\n            <Route path=\"/requests-per-min\" component={RequestsPerMinuteChart} />\n            <Route path=\"/\" component={Welcome} exact />\n          </Switch>\n        </Layout>\n      </div>\n   );\n  } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>\n);\n\nReactDOM.render( app, document.getElementById( 'root' ) );\nserviceWorker.unregister();\n"],"sourceRoot":""}